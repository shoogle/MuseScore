name: Deploy

# Set-up prior to first run:
# 1. Create 'production' environment: https://github.com/musescore/MuseScore/settings/environments
# 2. Enable 'required reviewers': MuseScore Editor Team

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build:'
        default: 'dummy' # TODO: 'backend linux_arm32 linux_arm64 linux_x64 macos windows_x64 windows_portable'
        required: true
      release_type:
        description: 'Release type: test,alpha,beta,rc,stable'
        default: 'alpha' # TODO: test
        required: true
      create_tag:
        description: 'Create tag: on,off (if on, release type must be alpha,beta,rc,stable)'
        default: 'on' # TODO: off
        required: false

defaults:
  run:
    shell: bash

jobs:

  get_tag_info:
    name: Get tag info
    runs-on: ubuntu-latest
    outputs:
      version_label: ${{ steps.make_tag_info.outputs.VERSION_LABEL }}
      tag_name: ${{ steps.make_tag_info.outputs.TAG_NAME }}
      release_name: ${{ steps.make_tag_info.outputs.RELEASE_NAME }}
    steps:
    - name: Clone repo with history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # entire history for all branches and tags
    - id: make_tag_info
      name: Make tag info
      env:
        RELEASE_TYPE: ${{ inputs.release_type }}
        CREATE_TAG: ${{ inputs.create_tag }}
      run: |
        git tag --list | tail -n 25
        echo ==========
        buildscripts/ci/release/make_tag_name.sh | tee -a "${GITHUB_OUTPUT}"
        echo ==========
        echo "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"

  build:
    name: Build
    needs: get_tag_info
    uses: ./.github/workflows/build_all.yml
    with:
      platforms: ${{ inputs.platforms }}
      build_mode: ${{ inputs.release_type == 'stable' && 'stable' || 'testing' }}
      publish: 'off' # TODO: ${{ inputs.create_tag }}
      sentry_project: ${{ inputs.mode == 'stable' && 'mu4' || 'sandbox' }}
      version_label: ${{ needs.get_tag_info.outputs.version_label }}

  update_learn_playlists:
    name: 'Update Homeâ†’Learn playlists'
    needs: build
    uses: ./.github/workflows/update_learn_playlists.yml
    with:
      mode: ${{ inputs.mode }}
      environment: production # requires approval

  create_draft_release:
    name: 'Create draft release: ${{ needs.get_tag_info.outputs.tag_name }}'
    needs:
      - get_tag_info # to access outputs
      - update_learn_playlists
    if: ${{ ! cancelled() && inputs.create_tag == 'on' }}
    runs-on: ubuntu-latest
    environment:
      name: production # requires approval
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.get_tag_info.outputs.tag_name }}
    # env:
    #   TAG_NAME: ${{ needs.get_tag_info.outputs.tag_name }}
    #   RELEASE_NAME: ${{ needs.get_tag_info.outputs.release_name }}
    steps:
    - name: Clone repository
      uses: actions/checkout@v4
    # - name: Make release name
    #   run: |
    #     buildscripts/ci/release/make_release_name.sh | tee -a "${GITHUB_ENV}"
    - name: Download and extract artifacts
      uses: actions/download-artifact@v4
      with:
        path: build.artifact
    - name: Prepare release files
      run: |
        mkdir release
        find build.artifact -type f

        for path in build.artifact/*/env/artifact_name.env; do
          artifact_name="$(<"${path}")"
          artifact_dir="$(dirname "$(dirname "${path}")")"
          artifact_path="${artifact_dir}/${artifact_name}"

          mv -v "${artifact_path}" release/
          if [[ -f "${artifact_path}.zsync" ]]; then
            mv -v "${artifact_path}.zsync" release/
          fi
        done

        cd release/
        echo >&2 "New checksums (sha256sum):"
        sha256sum * | tee checksums.sha256.txt >&2
        echo >&2
        cd ..

        # Compare new checksums to ones calculated during the build.
        echo >&2 "Old checksums (openssl sha256):"
        for path in build.artifact/*/checksum.txt; do
          while read -r openssl_line; do
            printf '%s\n' "${openssl_line}" >&2
            if [[ ! "${openssl_line}" =~ ^SHA256\(.*\)=\ [0-9a-f]{64}$ ]]; then
              echo >&2 "Error: openssl_line is badly formed."
            fi
            csum="${openssl_line##*)= }"
            file="${openssl_line%)= *}"
            file="${file#SHA256(}"
            file="$(basename "${file}")"
            match=''
            while read -r sha256sum_line; do
              # sha256sum prepends filename with ' ' if opened in text mode or '*' if opened in binary mode
              if [[ "${sha256sum_line}" == "${csum}  ${file}" || "${sha256sum_line}" == "${csum} *${file}" ]]; then
                match='true'
                break
              fi
            done < release/checksums.sha256.txt
            if [[ "${match}" != 'true' ]]; then
              echo >&2 "Error: Checksum mismatch for ${file}."
              exit 1
            fi
          done < "${path}"
        done
    - name: Create tag
      env:
        TAG_NAME: ${{ needs.get_tag_info.outputs.tag_name }}
      run: |
        int="(0|[1-9][0-9]*)"
        version="${int}\.${int}(\.${int})?"
        label="(rc|beta|alpha)(\.${int})?"
        pattern="^v${version}(-${label})?$"

        if [[ ! "${TAG_NAME}" =~ ${pattern} ]]; then
          echo >&2 "Error: TAG_NAME '${TAG_NAME}' doesn't match required regex: ${pattern}"
          exit 1
        fi

        git tag "${TAG_NAME}" "${GITHUB_SHA}"
        git push origin "${TAG_NAME}"
    - name: Release
      uses: softprops/action-gh-release@v2
      with: # https://github.com/softprops/action-gh-release?tab=readme-ov-file#inputs
        draft: true
        prerelease: ${{ inputs.RELEASE_TYPE != 'stable' }}
        files: release/*
        name: ${{ needs.get_tag_info.outputs.release_name }}
        tag_name: ${{ needs.get_tag_info.outputs.tag_name }}
        fail_on_unmatched_files: true
        generate_release_notes: false

  # check release page and publish, wait for day, if there is no critical issues, then continue

  notify-users:
    needs: create_draft_release
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://github.com
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
